{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","transaction","request","objectStore","add","onabort","console","log","e","onsuccess","onerror","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAuB;AAAA;;AACnB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAW;AAAA;;AAChB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,cAAc,MAAKN,WAAL,CACjBM,WADiB,CACL,MAAKL,MADA,EACQ,WADR,CAAlB;;AAGA,oBAAIM,UAAUD,YACTE,WADS,CACG,MAAKP,MADR,EAETQ,GAFS,CAELP,UAFK,CAAd;;AAKA;AACA;;AAEAI,4BAAYI,OAAZ,GAAsB,aAAK;AACvBC,4BAAQC,GAAR,CAAYC,CAAZ;AACAF,4BAAQC,GAAR,CAAY,oBAAZ;AACH,iBAHD;;AAKAL,wBAAQO,SAAR,GAAoB,aAAK;AACrBH,4BAAQC,GAAR,CAAY,kCAAZ;AACAR;AACH,iBAHD;;AAKAG,wBAAQQ,OAAR,GAAkB,aAAK;AACnBJ,4BAAQC,GAAR,CAAYC,EAAEG,MAAF,CAASC,KAArB;AACAZ,2BAAO,0CAAP;AACH,iBAHD;AAIH,aA1BM,CAAP;AA2BH;;;qCAGW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIa,SAAS,OAAKlB,WAAL,CAAiBM,WAAjB,CAA6B,OAAKL,MAAlC,EAA0C,WAA1C,EACRO,WADQ,CACI,OAAKP,MADT,EAERkB,UAFQ,EAAb;;AAIA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOJ,SAAP,GAAmB,aAAK;AACpB,wBAAIO,QAAQR,EAAEG,MAAF,CAASM,MAArB;AACA,wBAAGD,KAAH,EAAS;AACL,4BAAIE,OAAOF,MAAMG,KAAjB;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;;AAEAR,8BAAMS,QAAN;AACH,qBALD,MAKO;AACH1B,gCAAQgB,WAAR;AACH;AACJ,iBAVD;;AAaAF,uBAAOH,OAAP,GAAiB,aAAK;AAClBJ,4BAAQC,GAAR,CAAYC,EAAEG,MAAF,CAASC,KAArB;AACAZ,2BAAO,yCAAP;AACH,iBAHD;AAIH,aAxBM,CAAP;AAyBH;;;qCAKW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIE,UAAW,OAAKP,WAAL,CAAiBM,WAAjB,CAA6B,OAAKL,MAAlC,EAA0C,WAA1C,EACEO,WADF,CACc,OAAKP,MADnB,EAEE8B,KAFF,EAAf;;AAIAxB,wBAAQO,SAAR,GAAoB;AAAA,2BAAGV,QAAQ,oCAAR,CAAH;AAAA,iBAApB;AACAG,wBAAQQ,OAAR,GAAkB,aAAG;AACjBJ,4BAAQC,GAAR,CAAYC,EAAEG,MAAF,CAASC,KAArB;AACAZ,2BAAO,0CAAP;AACH,iBAHD;AAKH,aAZM,CAAP;AAaH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao{\r\n\r\n    constructor(connection){\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n        return new Promise((resolve, reject) => {\r\n            let transaction = this._connection\r\n            .transaction(this._store, 'readwrite');\r\n\r\n            let request = transaction\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n\r\n            // #### VAI CANCELAR A TRANSAÇÃO. O evento onerror será chamado.\r\n            // transaction.abort(); \r\n            \r\n            transaction.onabort = e => {\r\n                console.log(e);\r\n                console.log('Transação abortada');\r\n            };\r\n\r\n            request.onsuccess = e => {\r\n                console.log(\"Negociação incluída com sucesso!\");\r\n                resolve();\r\n            };\r\n    \r\n            request.onerror = e => {\r\n                console.log(e.target.error)\r\n                reject(\"Não foi possível adicionar a negociação!\");\r\n            };\r\n        });\r\n    }\r\n\r\n\r\n    listaTodos(){\r\n        return new Promise((resolve, reject) => {\r\n            let cursor = this._connection.transaction(this._store, 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n    \r\n            let negociacoes = [];\r\n    \r\n            cursor.onsuccess = e => {\r\n                let atual = e.target.result;\r\n                if(atual){\r\n                    let dado = atual.value;\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n    \r\n                    atual.continue();\r\n                } else {\r\n                    resolve(negociacoes);\r\n                }\r\n            };\r\n    \r\n    \r\n            cursor.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível listar as negociações!');\r\n            };\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    apagaTodos(){\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let request =  this._connection.transaction(this._store, 'readwrite')\r\n                            .objectStore(this._store)\r\n                            .clear();\r\n\r\n            request.onsuccess = e=>resolve(\"Negociações removidas com sucesso!\");\r\n            request.onerror = e=>{\r\n                console.log(e.target.error);\r\n                reject(\"Não foi possível remover as negociações!\");\r\n            }\r\n\r\n        });\r\n    }\r\n}"]}