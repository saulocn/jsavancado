{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAY;AACjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAO0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsB,YAAtB,EAAqC,CAArC,CAAlB;AACAH,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAe;AACXA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACA;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAKH,iBAvBM,CAAP;AAwBH;AAhCL;AAAA;AAAA,0CAkCyBrB,UAlCzB,EAkCoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AAChDzB,+BAAW2B,iBAAX,CAA6B9B,MAA7B,EAAqC,EAAC+B,eAAc,IAAf,EAArC;AACH,iBAHD;AAIH;AAvCL;AAAA;AAAA,8CAyC4B;AACpB,oBAAG5B,UAAH,EAAc;AACVC;AACA;AACAD,iCAAa,IAAb;AACH;AACJ;AA/CL;;AAAA;AAAA;AAkDH,CA1DuB,EAAxB;AA2DA","file":"ConnectionFactory.js","sourcesContent":["//function tmp() {\r\nvar ConnectionFactory = (function () {\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor(){\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n        }\r\n\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open('aluraframe' , 4);\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection){\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        //close = connection.close;\r\n                        connection.close = function() {\r\n                            throw new Error('Não se pode fechar diretamente essa conexão!');\r\n                        } \r\n                    }\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n\r\n            });\r\n        }\r\n\r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n                connection.createObjectStore(stores, {autoIncrement:true});\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                // Reflect.apply(close, connection, []);\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n//var ConnectionFactory = tmp();"]}